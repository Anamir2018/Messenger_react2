{"version":3,"sources":["assets/theme/colors.ts","assets/svgs/SvgIcons.tsx","components/left/Header.tsx","components/redux/friends/friendsSlice.ts","supabase/supabaseClient.ts","components/helpers/Loading.tsx","components/left/ListFriends.tsx","components/redux/chat/chatSlice.ts","components/SearchBar.tsx","components/left/Left.tsx","components/center/Header.tsx","assets/reactionIcons.ts","components/center/Reaction.tsx","components/redux/chat/reactionPopupSlice.ts","components/center/Popup.tsx","components/center/MessageActions.tsx","components/redux/imageViewer/imageViewerSlice.ts","components/center/Message.tsx","components/center/IsFriendWriting.tsx","components/center/Center.tsx","components/right/Header.tsx","components/right/FriendInfos.tsx","components/right/ConversationColoros.tsx","components/right/SharedPhotos.tsx","components/right/Right.tsx","components/ImageViewer.tsx","components/redux/user/userSlice.ts","supabase/Auth.tsx","App.tsx","reportWebVitals.ts","components/redux/rootReducer.ts","components/redux/store.ts","index.tsx"],"names":["MAIN_COLOR_BLUE","MAIN_COLOR_GRAY_a","MAIN_COLOR_GRAY_4","PhoneIcon","xmlns","className","viewBox","fill","d","CamIcon","preserveAspectRatio","NewMessageIcon","stroke","strokeLinecap","strokeLinejoin","strokeWidth","SearchIcon","props","color","LeftChevronIcon","RightChevronIcon","SettingsIcon","fillRule","clipRule","AvatarIcon","w","h","DotsHorizontalIcon","CheckedIcon","AttachIcon","LikeIcon","src","alt","SmileIcon","ReplyIcon","TransferIcon","CloseIcon","LoadingIcon","Header","initialState","list","selectedFriendId","undefined","colorChat","sharedPhotos","searchFriend","isFriendWriting","friendsSlice","createSlice","name","reducers","setSelectedFriend","state","action","length","console","log","friendColorChat","filter","friend","id","payload","setColorChat","map","setListFriends","setSharedPhotos","setSearchFriend","setIsFriendWriting","setIsFriendWritingTimeout","isFriendWritingTimeout","actions","supabase","createClient","process","Loading","ListFriends","friends","useSelector","user","dispatch","useDispatch","useState","loading","setLoading","error","setError","useEffect","a","from","data","message","listFriend","getFriends","index","Friend","firstName","lastName","avatar","lastMessage","timeLastMessage","isSelected","nbMessagesNotRead","setNbMessagesNotRead","idSelectedFriend","select","eq","nb","msg","is_read","getNbMessagesNotRead","showFriendFilter","trim","toLocaleLowerCase","includes","onClick","chatSlice","messages","searchConversation","addNewMessage","setAction","updateReactionMessage","idSelectedMessage","forEach","element","reactionType","reactionText","reaction","reactionSharedImage","setChatMessages","setSearchConversation","updateMessageToBeRead","isRead","deleteMessage","SearchBar","leftPadding","htmlFor","idInput","colorIcon","type","placeholder","onChange","e","currentTarget","value","Left","SmSearchBtn","selectedFriend","fullName","status","toUpperCase","slice","REACTION_ICONS","Reaction","reactionPopupSlice","show","messageType","popupType","showPopup","Popup","deleteMessageDb","delete","reactionPopup","icon","ReactionIcon","url","updateReactionMessageDb","id_messsage","index_reacion","update","reaction_text","reaction_shared_image","MessageActions","idMessage","popup","reactionHandler","isFriendContent","imageViewerSlice","urlImage","showImageViewer","Message","lastUserMessageReadRef","current","scrollIntoView","behavior","block","showPopupState","selectedfriend","ref","showTime","Time","time","isFriendMessage","Avatar","isLastRead","isFriend","text","sharedImage","SharedImage","isLikeMessage","Content","content","borderRadius","React","memo","setShowPopup","searchMessage","chat","TextContent","toLowerCase","indexOf","textStart","textSearch","textEnd","style","backgroundColor","formatDate","timestamp","Date","now","getDate","getMonth","getFullYear","getHours","getMinutes","IsFriendWriting","showIsWriting","setShowIsWriting","id_user","id_selected_friend","mySubscription","on","friendShip","new","id_user1","id_user2","user1_is_writing","user2_is_writing","subscribe","removeSubscription","Center","actionType","chatContainerRef","useRef","setMessageReadDb","getChat","order","ascending","id_sender","id_reciever","shared_image","friendShipData","color_chat","color_chat2","getColorChat","eventType","lastFriendMsgReadIndex","lastUserMsgReadIndex","i","isRightClosedState","isMobileScreenState","previousMsg","thisMsg","nextMsg","borderRadious","generateMessageBorderRadius","getTime","showMessageTime","TypeMessage","isWriting","timeOutInstance","updateIswritingDb","res","match","updateSetTimeout","clearTimeout","timeout","setTimeout","idLastMessage","textMessage","setTextMessage","updateDb","insert","sendNewMessage","msg_text","msg_image","onSubmit","preventDefault","target","FriendInfos","adress","fbLink","href","ConversationColoros","PALETTE_COLORS","colorCode","Color","code","updateColorChatDb","clickHandler","useCallback","SharedPhotos","seletedFriendId","shared","photo","getSharedPhotos","Image","Right","HideRightBtn","SettingsBtn","isRightClosed","setRightToClose","ImageViewer","imageViewer","userSlice","setUser","Auth","UserBtn","App","setToMobileScreen","checkScreenWidth","window","innerWidth","addEventListener","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","reducer","store","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7c826a93.chunk.js","sourcesContent":["export const MAIN_COLOR_BLUE = \"#0085ff\";\nexport const MAIN_COLOR_GRAY_a = \"#aaaaaa\";\nexport const MAIN_COLOR_GRAY_f = \"#ffffff\";\nexport const MAIN_COLOR_GRAY_4 = \"#444444\";","import React from 'react'\nimport {MAIN_COLOR_BLUE, MAIN_COLOR_GRAY_4, MAIN_COLOR_GRAY_a} from '../theme/colors'\nexport const PhoneIcon = () => <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill={MAIN_COLOR_BLUE}>\n    <path d=\"M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z\" />\n</svg>\n\n\nexport const CamIcon = () => <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-6\" viewBox=\"0 0 20 20\" fill={MAIN_COLOR_BLUE} preserveAspectRatio=\"none\">\n    <path d=\"M2 6a2 2 0 012-2h6a2 2 0 012 2v8a2 2 0 01-2 2H4a2 2 0 01-2-2V6zM14.553 7.106A1 1 0 0014 8v4a1 1 0 00.553.894l2 1A1 1 0 0018 13V7a1 1 0 00-1.447-.894l-2 1z\" />\n</svg>\n\nexport const NewMessageIcon = () => <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke={MAIN_COLOR_BLUE}>\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" />\n</svg>\n\nexport const SearchIcon = (props: {color: string}) => <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-3.85 w-3.85\" fill=\"none\" viewBox=\"0 0 24 24\" stroke={props.color || MAIN_COLOR_BLUE}>\n<path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n</svg>\n\nexport const LeftChevronIcon = () => <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"white\">\n<path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 19l-7-7 7-7\" />\n</svg>\nexport const RightChevronIcon = () => <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"white\">\n<path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n</svg>\n\nexport const SettingsIcon = () => <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" viewBox=\"0 0 20 20\" fill={MAIN_COLOR_GRAY_4}>\n<path fillRule=\"evenodd\" d=\"M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z\" clipRule=\"evenodd\" />\n</svg>\n\nexport const AvatarIcon = (props: {w?: string, h?: string}) => <svg xmlns=\"http://www.w3.org/2000/svg\" className={\"inline-block \" + (` ${props.w }` ? props.w : \" w-16.28 \") + (props.h ? ` ${props.h }` : \" h-16.28 \")} viewBox=\"0 0 20 20\" fill={MAIN_COLOR_GRAY_a}>\n<path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z\" clipRule=\"evenodd\" />\n</svg>\n\nexport const DotsHorizontalIcon = () => <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke={MAIN_COLOR_GRAY_4}>\n<path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 12h.01M12 12h.01M19 12h.01M6 12a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0z\" />\n</svg>\n\nexport const CheckedIcon = () => <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"#ffffff\">\n<path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n</svg>\n\nexport const AttachIcon = () => <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5.46 w-5.37\" fill=\"none\" viewBox=\"0 0 24 24\" stroke={MAIN_COLOR_GRAY_a}>\n<path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13\" />\n</svg>\n\nexport const LikeIcon = () => <img className=\"w-5.83\" src=\"/images/like.png\" alt=\"like\" />\n\nexport const SmileIcon = () => <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n<path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M14.828 14.828a4 4 0 01-5.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n</svg>\n\nexport const ReplyIcon = () => <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill={MAIN_COLOR_GRAY_a}>\n<path fillRule=\"evenodd\" d=\"M7.707 3.293a1 1 0 010 1.414L5.414 7H11a7 7 0 017 7v2a1 1 0 11-2 0v-2a5 5 0 00-5-5H5.414l2.293 2.293a1 1 0 11-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n</svg>\nexport const TransferIcon = () => <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 transform -rotate-90\" fill=\"none\" viewBox=\"0 0 24 24\" stroke={MAIN_COLOR_GRAY_a}>\n<path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1\" />\n</svg>\nexport const CloseIcon = () => <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"white\">\n<path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n</svg>\nexport const LoadingIcon = () => <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-10 w-10 animate-spin\" fill=\"none\" viewBox=\"0 0 24 24\" stroke={MAIN_COLOR_BLUE}>\n<path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n</svg>","import { NewMessageIcon } from '../../assets/svgs/SvgIcons'\n\nfunction Header() {\n    return (\n        <header className=\"flex sm:content-between flex-col sm:flex-row sm:h-16.18 px-2 lg:px-5.3 py-2 sm:py-0 items-center overflow-hidden\">\n            <img className=\"px-0 sm:px-1 lg:px-3.46 w-10 min-w-10 sm:w-12 mb-4 sm:mb-0\" src=\"/images/icon_messenger.png\" alt=\"logo messenger\" />\n            <h1 className=\"pl-0 sm:pl-2 lg:pl-3.48 flex-1 text-base md:text-xl hidden sm:block\">Messenger</h1>\n            <button>\n                <NewMessageIcon />\n            </button>\n            \n        </header>\n    )\n}\n\nexport default Header\n","import { CaseReducer, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { friendType } from \"../types\";\n\n// Friends Type\ntype friendsState =  {\n    list: Array<friendType>,\n    selectedFriendId: number|undefined,\n    colorChat: string,\n    sharedPhotos: string[],\n    searchFriend: string,\n    isFriendWriting: boolean,\n    isFriendWritingTimeout?: NodeJS.Timeout,\n};\n\n// friends initial State\nconst initialState: friendsState = {\n    list: \n    [],\n    selectedFriendId: undefined,\n    colorChat: \"#0084ff\",\n    sharedPhotos: [],\n    searchFriend: \"\",\n    isFriendWriting: false,\n};\n\n// select new friend\nconst changeIsFriendWritingTimeout: CaseReducer<friendsState, PayloadAction<NodeJS.Timeout>>  = (state, action) => {\n    return {\n        ...state,\n        isFriendWritingTimeout: action.payload\n    }\n\n}\n// select new friend\nconst changeIsFriendWriting: CaseReducer<friendsState, PayloadAction<boolean>>  = (state, action) => {\n    return {\n        ...state,\n        isFriendWriting: action.payload\n    }\n\n}\n// select new friend\nconst changeSelectedFriend: CaseReducer<friendsState, PayloadAction<number>>  = (state, action) => {\n    if(state.list.length > 0) {\n        console.log(state.selectedFriendId);\n        \n        const friendColorChat = state.list.filter(friend => friend.id === action.payload)[0].colorChat;\n        return (\n            {\n            ...state,\n            selectedFriendId: action.payload,\n            colorChat: friendColorChat || state.colorChat\n            }\n        )\n    }\n\n}\n// change color chat\nconst changeColorChat: CaseReducer<friendsState, PayloadAction<string>>  = (state, action) => {\n    return (\n        {\n        ...state,\n        list: state.list.map(friend => (friend.id === state.selectedFriendId) ? {...friend, colorChat: action.payload} : friend),\n        colorChat: action.payload ? action.payload : \"#0084ff\"\n        }\n    )\n}\n\n// select new friend\nconst changeListFriends: CaseReducer<friendsState, PayloadAction<friendType[]>>  = (state, action) => {\n    return (\n        {\n            ...state,\n            list: action.payload\n        }\n    )\n}\n// select new friend\nconst changeSharedPhotos: CaseReducer<friendsState, PayloadAction<string[]>>  = (state, action) => {\n    return (\n        {\n            ...state,\n            sharedPhotos: action.payload\n        }\n    )\n}\n// select new friend\nconst changeSearchFriend: CaseReducer<friendsState, PayloadAction<string>>  = (state, action) => {\n    return (\n        {\n            ...state,\n            searchFriend: action.payload\n        }\n    )\n}\n// ---------------------------------------- Slice Default Export -------------\nconst friendsSlice = createSlice({\n    name: \"friends\",\n    initialState: initialState,\n    reducers: {\n        setSelectedFriend: changeSelectedFriend,\n        setColorChat: changeColorChat,\n        setListFriends: changeListFriends,\n        setSharedPhotos: changeSharedPhotos,\n        setSearchFriend: changeSearchFriend,\n        setIsFriendWriting: changeIsFriendWriting,\n        setIsFriendWritingTimeout: changeIsFriendWritingTimeout,\n    }\n})\n\nexport default friendsSlice;\nexport const { setSelectedFriend, setColorChat, setListFriends, setSharedPhotos, setSearchFriend, setIsFriendWriting, setIsFriendWritingTimeout } = friendsSlice.actions;\n","import { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL as string \nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY as string\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)","import React from 'react'\n\nfunction Loading() {\n    return (\n        <div className=\"absolute z-50 w-full h-full bg-gray-200 bg-opacity-60\">\n            <div className=\"absolute z-50 top-1/2 left-1/2\">\n                <svg className=\"animate-spin h-5 w-5 mr-3\" viewBox=\"0 0 24 24\">\n                </svg>\n            </div>\n        </div>\n    )\n}\n\nexport default Loading\n","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../redux/store';\nimport {setListFriends, setSelectedFriend} from '../redux/friends/friendsSlice'\nimport { supabase } from '../../supabase/supabaseClient';\nimport { friendType, userType } from '../redux/types';\nimport Loading from '../helpers/Loading';\n\nfunction ListFriends() {\n    const friends = useSelector((state: RootState) => state.friends);\n    const user = useSelector((state: RootState) => state.user.user);\n    const dispatch = useDispatch();\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(\"\");\n        \n    useEffect(() => {\n        async function getFriends() {\n            setLoading(true);\n            const { data, error } = await supabase.from('users')\n            if(error) {\n                setError(error.message);\n            }else if(data) {\n                const listFriend = data.filter((friend) => friend.id !== user?.id) as friendType[];\n                \n                dispatch(setListFriends(listFriend))\n                dispatch(setSelectedFriend(listFriend[0].id))\n                \n            }\n            setLoading(false);\n        }\n\n        getFriends();\n    }, [])\n    return (\n        <ul className=\" h-44 relative  overflow-y-auto flex-1\">\n            {\n                (error !== \"\") && <span className=\"text-red-600\">Error fetching data !</span>\n            }\n        {\n            loading ? <Loading /> :\n            friends.list.map(\n                (friend, index) => <Friend \n                                key={friend.id}\n                                id={friend.id}\n                                firstName={friend.firstName}\n                                lastName= {friend.lastName}\n                                avatar= {friend.avatar}\n                                lastMessage={friend.lastMessage}\n                                timeLastMessage = \"11:30\"\n                                isSelected={friends.selectedFriendId ? friend.id === friends.selectedFriendId : index === 0}    \n                            />\n            )\n        }\n        </ul>\n    )\n}\n\nexport default ListFriends\n\nfunction Friend(props: {id: number, avatar: string, firstName: string, lastName: string, lastMessage?: string,timeLastMessage?: string, isSelected: boolean,}) {\n    const { id,\n            firstName, \n            lastName, \n            avatar, \n            lastMessage, \n            timeLastMessage, \n            isSelected\n        } = props;\n    const [nbMessagesNotRead, setNbMessagesNotRead] = useState(0);\n    const idSelectedFriend = useSelector((state: RootState) => state.friends.selectedFriendId)\n    useEffect(() => {\n        const getNbMessagesNotRead = async () => {\n            let { data, error } = await supabase.from('messages')\n                                                    .select('*')\n                                                    .eq('id_reciever', props.id);\n            if(error)\n                console.log(error);\n            else {\n                if(data && data?.length > 0) {\n                    let nb = 0;\n                    data?.map(msg => !msg.is_read && nb++)\n                    setNbMessagesNotRead(nb);\n                }\n            }\n\n        }\n        getNbMessagesNotRead();    \n    }, [idSelectedFriend])\n    const searchFriend = useSelector((state: RootState) => state.friends.searchFriend);\n\n    const showFriendFilter = searchFriend === \"\" ||\n        (firstName.trim().toLocaleLowerCase() + \" \" + lastName.trim().toLocaleLowerCase())\n        .includes(searchFriend.trim().toLocaleLowerCase())\n        \n    const dispatch = useDispatch();\n    const clickHandler = () => {\n        console.log(props);\n        \n        dispatch(setSelectedFriend(id))\n    }\n    return (\n        showFriendFilter ? <li className={( isSelected ? \" bg-gray_e \" : \"\") + \" cursor-pointer w-full flex items-center px-2 lg:px-5.3 py-3.48 lg:py-3.84 overflow-hidden\"}\n            onClick={clickHandler}\n        >\n            <div className=\" rounded-full ring-2 ring-gray-100 overflow-hidden w-10 sm:w-12 min-w-10 flex \">\n            <span className=\" relative inline-block w-full pt-full  rounded-full text-white\">\n                {\n                    avatar ? <img className=\"absolute top-0 left-0 w-full h-full\" src={avatar} alt=\"avatar\" /> : <span className=\"absolute top-0 left-0 w-full h-full flex items-center justify-center bg-main_color_blue\">{ firstName[0] + lastName[0] }</span>\n                }\n                </span>\n            </div>\n            <div className=\"flex pl-2 lg:pl-5.3 flex-1 overflow-hidden\">\n                <div className=\" w-1/4 flex-grow\">\n                    <h3 className=\" w-full text-base text-gray_4   overflow-hidden whitespace-nowrap overflow-ellipsis\">{firstName + \" \" + lastName}</h3>\n                    <p className=\" w-full text-sm2 text-gray_a  whitespace-nowrap overflow-ellipsis overflow-hidden \">{lastMessage || \"\"}</p>\n                </div>\n                {nbMessagesNotRead > 0 && <div className=\" self-center p-1\">\n                    <span className=\" inline-block bg-main_color_blue text-white  text-sm rounded-full px-2.6 py-1 self-start\">\n                        {nbMessagesNotRead}\n                    </span>\n                </div>}\n                <div className=\"w-auto text-gray_a\">\n                    {timeLastMessage}\n                </div>\n            </div>\n        </li>\n        : <></>\n    )\n}","import { createSlice, CaseReducer, PayloadAction } from \"@reduxjs/toolkit\";\nimport {messageType} from '../types'\ntype chatType = {\n    messages: messageType[],\n    action: actionType,\n    searchConversation: string,\n}\ntype actionType = \"newMessage\"|\"reactToMessage\" | null;\nconst initialState: chatType = {\n    messages:[],\n    action: null,\n    searchConversation: \"\",\n}\n\nconst saveNewMessage : CaseReducer<chatType, PayloadAction<messageType>>  = (state, action) => {\n    return (\n        {\n            ...state,\n            messages:[\n                ...state.messages,\n                action.payload\n            ],\n            action: \"newMessage\",\n        }\n        )\n}\nconst changeActionType : CaseReducer<chatType, PayloadAction<actionType>>  = (state, action) => {\n    return (\n        {\n            ...state,\n            action: action.payload,\n        }\n        )\n}\n\nconst setReactionMessage : CaseReducer<chatType, PayloadAction<{idSelectedMessage?: number, reaction: number, reactionType: \"image\" | \"text\" | \"like\" | \"\" | undefined}>>  = (state, action) => {\n    if(action.payload.idSelectedMessage) {\n        state.messages.forEach(element => {\n            if(element.id === action.payload.idSelectedMessage) {\n                if(action.payload.reactionType === \"text\")\n                    element.reactionText = action.payload.reaction\n                else\n                    element.reactionSharedImage = action.payload.reaction\n            }\n        });\n    }\n}\n\nconst setMessages : CaseReducer<chatType, PayloadAction<messageType[]>>  = (state, action) => {\n    return(\n        {\n            ...state,\n            messages: action.payload\n        }\n    )\n    };\n\n\nconst setSearchConversationValue : CaseReducer<chatType, PayloadAction<string>>  = (state, action) => {\n        return(\n            {\n                ...state,\n                searchConversation: action.payload\n            }\n        )\n    }\n\nconst updateMessageToRead : CaseReducer<chatType, PayloadAction<number>>  = (state, action) => {\n    state.messages.map(msg => {\n                if(msg.id === action.payload)\n                    msg.isRead = true;\n                return msg;\n            })\n} \n\n\nconst deleteMsg : CaseReducer<chatType, PayloadAction<number>>  = (state, action) => {\n    return(\n        {\n            ...state,\n            messages: state.messages.filter(msg => msg.id !== action.payload)\n        }\n    )\n    };\n\n\n\n\n// ------------------------------------- Default export Chat slice\nconst chatSlice = createSlice({\n    name: \"chat\",\n    initialState: initialState,\n    reducers: {\n        addNewMessage: saveNewMessage,\n        setAction: changeActionType,\n        updateReactionMessage: setReactionMessage,\n        setChatMessages: setMessages,\n        setSearchConversation: setSearchConversationValue,\n        updateMessageToBeRead: updateMessageToRead,\n        deleteMessage: deleteMsg,\n    }\n})\n\nexport default chatSlice;\nexport const {addNewMessage, setAction, updateReactionMessage, setChatMessages, setSearchConversation, updateMessageToBeRead, deleteMessage} = chatSlice.actions;","import React from 'react'\nimport { useDispatch} from 'react-redux'\nimport {SearchIcon} from '../assets/svgs/SvgIcons'\nimport { setSearchConversation } from './redux/chat/chatSlice';\nimport { setSearchFriend } from './redux/friends/friendsSlice';\n\n\ntype props = {\n    colorIcon: string,\n    idInput: string,\n    leftPadding?: string,\n    iconSize?: string,\n}\nfunction SearchBar(props: props) {\n    const dispatch = useDispatch();\n    const onChangeHandler = (e: React.FormEvent<HTMLInputElement>) => {\n        if(props.idInput === \"searchFriend\") {\n            dispatch(setSearchFriend(e.currentTarget.value))\n        }else if(props.idInput === \"searchConversation\") {\n            dispatch(setSearchConversation(e.currentTarget.value))\n        }\n    }\n    return (\n        <div className={\"flex items-center sm:justify-start  overflow-hidden \" + (props.leftPadding || \"\")}>\n            <label htmlFor={props.idInput}>\n                <SearchIcon color ={props.colorIcon} />\n            </label>\n            <input \n                className=\" w-16 flex-1 pl-2 lg:pl-4 text-gray_a text-base focus:outline-none border-gray-100 border-b-2 border-opacity-0 focus:border-opacity-100 focus:transition-opacity ease-in-out duration-300 \" \n                id={props.idInput} \n                type=\"text\" \n                placeholder={\"Search \" + (props.idInput === \"searchConversation\" ? \"conversation\" : \"friend\")} \n                onChange={onChangeHandler}\n            />\n        </div>\n    )\n}\n\nexport default SearchBar\n","import React from 'react'\nimport Header from './Header'\nimport ListFriends from './ListFriends'\nimport SearchBar from '../SearchBar'\nimport {SearchIcon} from '../../assets/svgs/SvgIcons'\n\nimport {MAIN_COLOR_GRAY_a} from '../../assets/theme/colors'\n\nfunction Left() {\n    return (\n        <div className=\"h-full flex flex-col w-full overflow-hidden\">\n            <Header />\n            <div className=\" px-2 lg:px-5.3 py-1\">\n                {/* Search button for mobile */}\n                <SmSearchBtn />\n                {/* Search bar for other devices */}\n                <div className=\"hidden sm:block \">\n                    <SearchBar colorIcon={MAIN_COLOR_GRAY_a} leftPadding=\"pl-2 lg:pl-3.85\" idInput=\"searchFriend\" />\n                </div>\n\n            </div>\n            <ListFriends />\n        </div>\n    )\n}\n\nexport default Left\n\nfunction SmSearchBtn() {\n\n    const onClickSearchBtn = () => {};\n    return (\n    <div className=\"flex justify-center py-2\">\n        <button className = \"inline-block sm:hidden transform scale-150\"\n                onClick = {onClickSearchBtn}\n        >\n            <SearchIcon color ={MAIN_COLOR_GRAY_a} />\n        </button>\n    </div>\n    )\n}","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { PhoneIcon, CamIcon } from '../../assets/svgs/SvgIcons'\nimport Loading from '../helpers/Loading';\nimport { RootState } from '../redux/store'\n\nfunction Header() {\n    const selectedFriend = useSelector((state: RootState) => {\n        if(state.friends.list.length > 0) {\n            if(state.friends.selectedFriendId) {\n                return state.friends.list.filter(friend => friend.id === state.friends.selectedFriendId)[0]\n            }else \n                return state.friends.list[0]\n        }\n        return undefined;\n    });\n    if(!selectedFriend)\n        return <Loading />\n    const fullName = selectedFriend.firstName + \" \" + selectedFriend.lastName;\n    const status = selectedFriend.status ? (selectedFriend.status?.trim()[0].toUpperCase() + selectedFriend.status?.trim().slice(1)) : \"\";\n    return (\n        <header className=\" relative h-16.18 min-h-16.18 pt-3.9 overflow-hidden shadow-sm\">\n            <div className=\"absolute right-2 sm:right-5.62 top-5.46\">\n                <button>\n                    <PhoneIcon />\n                </button>\n                <button className=\" ml-2 sm:ml-8.26\">\n                    <CamIcon />\n                </button>\n            </div>\n            <h2 className=\" pl-4 sm:p-0 sm:text-center text-1.14 text-gray_4\">{fullName}</h2>\n            <p className=\" pl-4 sm:p-0 sm:text-center text-gray_a\"> {status} </p>\n        </header>\n    )\n}\n\nexport default Header\n","const REACTION_ICONS = [\n    \"https://static.xx.fbcdn.net/images/emoji.php/v9/z92/1/128/2764.png\",\n    \"https://static.xx.fbcdn.net/images/emoji.php/v9/z6e/1/128/1f606.png\",\n    \"https://static.xx.fbcdn.net/images/emoji.php/v9/z5b/1/128/1f62e.png\",\n    \"https://static.xx.fbcdn.net/images/emoji.php/v9/za8/1/128/1f622.png\",\n    \"https://static.xx.fbcdn.net/images/emoji.php/v9/za6/1/128/1f620.png\",\n    \"https://static.xx.fbcdn.net/images/emoji.php/v9/z96/1/128/1f44d.png\",\n    \"https://static.xx.fbcdn.net/images/emoji.php/v9/z17/1/128/1f44e.png\"\n]\nexport default REACTION_ICONS;","import REACTION_ICONS from '../../assets/reactionIcons'\n\n\nfunction Reaction(props: {value: number}) {\n    \n    return (\n        <div>\n            {props.value >= 0 && \n                <img className=\"w-5 mx-3.3\"  \n                    src={REACTION_ICONS[props.value]} \n                    alt=\"reaction\" \n                    \n                    />}\n        </div>\n    )\n}\n\nexport default Reaction\n\n","import { createSlice, CaseReducer, PayloadAction } from \"@reduxjs/toolkit\";\ntype popupSliceType = {\n    show?: boolean,\n    messageType?: messageType,\n    popupType?: popupType,\n    idSelectedMessage?: number,\n};\ntype messageType = \"text\" | \"image\" | \"like\" | \"\";\ntype popupType = \"react\" | \"options\" | \"reply\" | \"\";\nconst initialState: popupSliceType = {\n    show: false,\n    messageType: \"\",\n    popupType: \"\",\n    idSelectedMessage: -1,\n}\n\nconst setShowPopup : CaseReducer<popupSliceType, PayloadAction<popupSliceType>>  = (state, action) => {\n    const show = (state.idSelectedMessage === action.payload.idSelectedMessage &&\n                state.messageType === action.payload.messageType &&\n                state.popupType === action.payload.popupType ) ? false : true;\n    return (\n        {\n            show: show,\n            messageType:  action.payload.messageType,\n            idSelectedMessage: show ? action.payload.idSelectedMessage : -1,\n            popupType: action.payload.popupType,\n        }\n    )\n}\n\n// ------------------------------------- Default export Chat slice\nconst reactionPopupSlice = createSlice({\n    name: \"reactionPoup\",\n    initialState: initialState,\n    reducers: {\n        showPopup: setShowPopup,\n    }\n})\n\nexport default reactionPopupSlice;\nexport const {showPopup} = reactionPopupSlice.actions;\n// const changePopupRef: CaseReducer<popupType, PayloadAction<React.MutableRefObject<HTMLDivElement | null>> >  = (state, action) => {\n//     console.log(\"Ref popup: \",action.payload);\n    \n//     return (\n//         {\n//             ...state,\n//             popupRef: action.payload,    \n//         }\n//     )\n// }\n// const changePopupParentRef : CaseReducer<popupType, PayloadAction<React.MutableRefObject<HTMLDivElement | null>>>  = (state, action) => {\n//     // if(state.popupRef && state.popupRef.current) {\n//     //     if(action.payload && action.payload.current)\n//     //     // @ts-ignore: Object is possibly 'null'.\n//     //     action.payload?.current.prepend(state.popupRef.current)\n//     //     else\n//     //     document.body.prepend(state.popupRef.current as HTMLDivElement || \"\")\n//     // } \n//     return (\n//         {\n//             ...state,\n//             // popupParentRef: action.payload    \n//         }\n//     )\n// }\n// const changeSelectedMessage: CaseReducer<popupSliceType, PayloadAction<{id: number, type: poupLocationType}>>  = (state, action) => {\n\n//     return(\n//         {\n//             ...state,\n//             show: !state.show,\n//             idSelectedMessage: action.payload.id,\n//             type: action.payload.type,\n//         }\n//     )\n// }\n","import REACTION_ICONS from '../../assets/reactionIcons'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { deleteMessage, setAction, updateReactionMessage } from '../redux/chat/chatSlice';\nimport { RootState } from '../redux/store';\nimport { supabase } from '../../supabase/supabaseClient';\n\nfunction Popup(props: {type: string}) {\n    const deleteMessageDb = async (id: number) => {\n        await supabase.from('messages')\n                        .delete()\n                        .eq('id', id)\n    } \n    const dispatch = useDispatch();\n    const idSelectedMessage = useSelector((state: RootState) => state.reactionPopup.idSelectedMessage);\n    const onDeleteHandller = () => {\n        if(idSelectedMessage) {\n            dispatch(deleteMessage(idSelectedMessage));\n            deleteMessageDb(idSelectedMessage)\n        }\n    }\n    \n    if(props.type === \"reaction\")\n        return(\n            <>\n                <ul className=\" absolute  bottom-11 left-1/2 bg-white transform -translate-x-1/2 px-2 sm:px-4 py-2 flex items-center rounded-full z-10\">\n                {\n                    REACTION_ICONS.map((icon, index) => <ReactionIcon key={index} id={index} url={icon} />)\n                }\n                </ul>\n                <span className=\"absolute bottom-12 left-1/2 h-6 w-6 bg-white -rotate-45 transform -translate-x-3 translate-y-3 z-0\"></span>\n            </>\n        )\n    else if(props.type === \"options\")\n            return(\n                <>\n                    <div className=\" absolute  bottom-11 left-1/2 bg-white text-gray-500 transform -translate-x-1/2 p-0.5 sm:p-1 flex items-center rounded-full z-10 text-xs sm:text-base\">\n                        <button className=\"px-1 sm:px-3 py-1 hover:bg-gray-200 rounded-xl\"\n                                onClick={onDeleteHandller}\n                        >\n                            Delete\n                        </button>\n                        <button className=\"px-1 sm:px-3 py-1 hover:bg-gray-200 rounded-xl\">Transfer</button>\n                    </div>\n                    <span className=\"absolute bottom-12 left-1/2 h-6 w-6 bg-white -rotate-45 transform -translate-x-3 translate-y-3 z-0\"></span>\n                </>\n            )\n    else\n        return <></>;\n}\n\nexport default Popup\n\nfunction ReactionIcon(props: {url: string, id: number}) {\n    const updateReactionMessageDb = async ( id_messsage: number, \n                                            index_reacion: number, \n                                            reactionType?: \"text\" | \"image\" | \"like\" | \"\"\n                                        ) => {\n\n        const update = (reactionType === \"text\") ? {reaction_text: index_reacion} \n                                                : {reaction_shared_image: index_reacion}\n\n        await supabase.from('messages')\n                                        .update(update)\n                                        .eq('id', id_messsage)\n            \n    }\n    const dispatch = useDispatch();\n    const reactionType = useSelector((state: RootState) => state.reactionPopup.messageType)\n    const idSelectedMessage = useSelector((state: RootState) => state.reactionPopup.idSelectedMessage)\n    const clickHandler = () => {\n        if(idSelectedMessage) {\n            dispatch(setAction(\"reactToMessage\"));\n            dispatch(updateReactionMessage({idSelectedMessage, reaction: props.id, reactionType}))\n            updateReactionMessageDb(idSelectedMessage, props.id, reactionType)\n        }\n        \n    }\n    return(\n        <button className=\"w-4 sm:w-7 sm:mx-1 mx-0.5\">\n            <img \n                className=\"w-full\" \n                src={props.url} \n                alt=\"reaction\" \n                onClick={clickHandler}\n                />\n        </button>\n    )\n}","import { useDispatch, useSelector } from 'react-redux';\nimport {SmileIcon, DotsHorizontalIcon, ReplyIcon, TransferIcon} from '../../assets/svgs/SvgIcons'\nimport { showPopup } from '../redux/chat/reactionPopupSlice';\nimport { RootState } from '../redux/store';\nimport Popup from './Popup'\n\n\ntype props = {\n    idMessage?: number,\n    isFriendContent: boolean,\n    setShowPopup: Function,\n    type: \"image\" | \"text\" | \"like\"\n}\nconst reactionType = {react:\"react\", replay: \"reply\", options: \"options\"} \n\n\nfunction MessageActions(props: props) {\n    // const REACT_ICON_REF = useRef(null);\n    // const OPTIONS_ICON_REF = useRef(null);\n    if(props.idMessage !== undefined) {\n        \n    }\n    const dispatch = useDispatch();\n    const popup = useSelector((state: RootState) => {\n        return ({\n            show: state.reactionPopup.show && state.reactionPopup.idSelectedMessage === props.idMessage,\n            messageType: state.reactionPopup.messageType,\n            popupType: state.reactionPopup.popupType\n        })\n    })\n\n    // -------------------------------- start bLabla\n    const reactionHandler = (reaction: string) => {\n        switch(reaction) {\n            case reactionType.react:\n                dispatch(showPopup({\n                    idSelectedMessage: props.idMessage, \n                    messageType: props.type,\n                    popupType: \"react\",\n                }));\n                break;\n            case reactionType.replay:\n                dispatch(showPopup({\n                    idSelectedMessage: -1,\n                }));\n                break;\n            case reactionType.options:\n                dispatch(showPopup({\n                    idSelectedMessage: props.idMessage, \n                    messageType: props.type,\n                    popupType: \"options\",\n                }));\n                break;\n            default:\n                break;\n        }\n        \n    }\n\n    \n    return (\n        <div className={` flex mx-4 ${!props.isFriendContent ? \"flex-row-reverse\": \"\"} ${props.type === \"image\" ? \"flex-col sm:flex-row\" : \"\"}`}>\n            {props.isFriendContent && <div className=\"relative\">\n                <div className=\" cursor-pointer text-gray_a rounded-full overflow-hidden p-1 hover:bg-gray-300\"\n                        onClick={() => reactionHandler(reactionType.react)}\n                >\n                    {(popup.show && popup.messageType === props.type && popup.popupType === \"react\") && <Popup type=\"reaction\" />}\n                    <SmileIcon />\n                </div>\n            </div>}\n            <div>\n                <button className={\" text-gray_a rounded-full overflow-hidden p-1 hover:bg-gray-300 \" + (!props.isFriendContent ? \" transform scale-x-n100 \": \"\") }\n                    onClick={() => reactionHandler(reactionType.replay)}\n                >\n                    {\n                        (props.type === \"text\") ? <ReplyIcon /> : props.type === \"image\" ? <TransferIcon /> : \"\"\n                    }\n                </button>\n            </div>\n            <div  className=\"relative\">\n                <div className=\" cursor-pointer text-gray_a rounded-full overflow-hidden p-1 hover:bg-gray-300\"\n                    onClick={() => reactionHandler(reactionType.options)}\n                >\n                    {(popup.show&& popup.messageType === props.type && popup.popupType === \"options\") && <Popup type=\"options\" />}\n                    <DotsHorizontalIcon />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default MessageActions\n\n\n\n    // --------------------------------  end bLabla\n\n/*/\n    const showPopup = (iconRef:React.MutableRefObject<null>, popupParentRef: React.MutableRefObject<null> | null ) => {\n        //if(parentRef && (popupParentRef === null || popupParentRef.current !== parentRef.current))\n        // return false in case no ref to the icon or the popup already shown\n        \n        if(iconRef === null || (popupParentRef && (popupParentRef.current === iconRef.current)))\n            return false;\n        return true;\n    }\n    const reactHandler = (i: number) => {\n        dispatch(setMessageIdForReaction(props.idMessage))\n        dispatch(setReactionType(props.type));\n        // Reaction popup\n        if(i === 1) {\n            const show = showPopup(REACT_ICON_REF, SINGLETON_REACTION_POPUP.parentRef)\n            \n            if(show) {\n                SINGLETON_REACTION_POPUP.setParent(REACT_ICON_REF);\n                SINGLETON_OPTIONS_POPUP.setParent(null);\n                // Keep showing the popup without hover\n                props.setShowPopup(true)\n            }else {\n                SINGLETON_REACTION_POPUP.setParent(null);\n                // hide the popup \n                props.setShowPopup(false)\n            }\n            \n        }else if(i === 3) { // Other options popup\n            \n            const show = showPopup(OPTIONS_ICON_REF, SINGLETON_OPTIONS_POPUP.parentRef)\n            \n            if(show) {\n                SINGLETON_OPTIONS_POPUP.setParent(OPTIONS_ICON_REF);\n                SINGLETON_REACTION_POPUP.setParent(null);\n                // Keep showing the popup without hover\n                props.setShowPopup(true)\n            }else {\n                SINGLETON_OPTIONS_POPUP.setParent(null);\n                // Hide the popup \n                props.setShowPopup(false)\n            }\n        }else {\n            // hide other popups \n            SINGLETON_REACTION_POPUP.setParent(null);\n            SINGLETON_OPTIONS_POPUP.setParent(null);\n            // Hide the popup \n            props.setShowPopup(false)\n            // To do: show respond to the message\n            //.........\n        }\n    };\n*/","import { CaseReducer, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\ntype viewerType = {\n    urlImage: string\n}\n// friends initial State\nconst initialState = {\n    urlImage: \"\"\n};\n\nconst viewImageViewer: CaseReducer<viewerType, PayloadAction<string>>  = (state, action) => {\n    return (\n        {\n        ...state,\n        urlImage: action.payload\n        }\n    )\n}\n\n\n// ---------------------------------------- Slice Default Export -------------\nconst imageViewerSlice = createSlice({\n    name: \"imageViewer\",\n    initialState: initialState,\n    reducers: {\n        showImageViewer: viewImageViewer\n    }\n})\n\nexport default imageViewerSlice;\nexport const { showImageViewer } = imageViewerSlice.actions;\n","import React, { useEffect, useState } from 'react'\nimport {AvatarIcon} from '../../assets/svgs/SvgIcons'\nimport Reaction from './Reaction'\nimport MessageActions from './MessageActions'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { RootState } from '../redux/store'\nimport { showImageViewer } from '../redux/imageViewer/imageViewerSlice'\nimport { messageType } from '../redux/types'\n\ntype props = {\n    data: messageType,\n    borderRadius: string,\n    showTime: boolean,\n    isLastRead: boolean,\n    lastUserMessageReadRef?: React.MutableRefObject<null>,\n}\nfunction Message(props: props) {\n    useEffect(() => {\n        if(props.lastUserMessageReadRef && props.lastUserMessageReadRef.current) {\n            // @ts-ignore: Object is possibly 'null'.\n            props.lastUserMessageReadRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' })\n        }\n    }, [])\n    const showPopupState= useState(false);\n    const user = useSelector((state: RootState) => state.user)\n    const selectedfriend = useSelector((state: RootState) => state.friends.list.filter(friend => friend.id === state.friends.selectedFriendId)[0])\n    return (\n        <div className=\"w-full flex flex-col overflow-hidden\" ref={props.lastUserMessageReadRef}>\n            {props.showTime && <Time time={props.data.time} />}\n            <div className={\"flex  \" + (!props.data.isFriendMessage ? \" flex-row-reverse \" : \"\")}>\n                <Avatar src={selectedfriend.avatar} isLastRead={props.isLastRead}  isFriend={props.data.isFriendMessage} />\n                <div className=\"flex-auto\">\n                    {\n                        (props.data.text === \"\" && props.data.sharedImage === \"\") ? \n                            <SharedImage \n                                    idMessage={props.data.id}\n                                    src={\"/images/like.png\"}\n                                    isFriendMessage={props.data.isFriendMessage} \n                                    showPopupState={showPopupState}\n                                    isLikeMessage={true}\n                            /> \n                        :\n                        <>\n                            <Content \n                                idMessage={props.data.id}\n                                content={props.data.text} \n                                isFriendMessage={props.data.isFriendMessage}\n                                borderRadius = {props.borderRadius}\n                                reaction={props.data.reactionText}\n                                showPopupState={showPopupState}\n                                />\n                            <SharedImage \n                                idMessage={props.data.id}\n                                src={props.data.sharedImage}\n                                isFriendMessage={props.data.isFriendMessage} \n                                showPopupState={showPopupState}\n                                reaction={props.data.reactionSharedImage}\n                            />\n                        </>\n                    }\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default React.memo(Message)\n\nfunction SharedImage(props: {idMessage?: number, src: string|undefined, isFriendMessage: boolean, showPopupState: [boolean, Function], reaction?: number, isLikeMessage?: boolean}) {\n    const dispatch = useDispatch();\n\n    const showPopup = useSelector((state: RootState) => \n        (state.reactionPopup.show &&\n        (state.reactionPopup.idSelectedMessage === props.idMessage) &&\n        (state.reactionPopup.messageType === \"image\"))\n    )\n    const clickHandler = () => {\n        dispatch(showImageViewer(props.src || \"\"))\n    }\n    return (\n        <>\n            {props.src && <div className={\" group flex items-center\" + (!props.isFriendMessage ? \"  flex-row-reverse \" : \"\")}>\n                {\n                    props.isLikeMessage ?\n                    <img className={` w-10 inline-block  ${!props.isFriendMessage ? \"transform scale-x-n100\" : \"\"}`} src={props.src} alt=\"like\"/>\n                    : <>\n                        <img \n                            className={\" cursor-pointer inline-block max-w-70 sm:max-w-37.84 \" + (props.isFriendMessage ? \" rounded-tr-xl rounded-br-xl sm:rounded-tr-3xl sm:rounded-br-3xl \" : \" rounded-tl-xl rounded-bl-xl sm:rounded-tl-3xl sm:rounded-bl-3xl \")} src={props.src} \n                            alt=\"shared\" \n                            onClick={clickHandler}\n                        />\n                        {(props.reaction !== undefined) && <span className={\"inline-block self-end text-gray_a \"}>\n                            <Reaction value={props.reaction} />\n                        </span>}\n                    </>\n                }\n                <div className={` opacity-0 group-hover:opacity-100 transition-opacity duration-500 ease-in-out ${showPopup ? \"opacity-100\":\"\"} `}>\n                    <MessageActions\n                        idMessage= {props.idMessage}\n                        setShowPopup= {props.showPopupState[1]}\n                        isFriendContent={props.isFriendMessage} \n                        type={!props.isLikeMessage ? \"image\" : \"like\"}\n                    />\n\n                </div>\n            </div>}\n        </>\n)\n}\n\nfunction Content(props: {idMessage?: number, content: string, isFriendMessage: boolean, borderRadius: string, reaction?: number, showPopupState: [boolean, Function]}) {\n    const colorChat = useSelector((state: RootState) => state.friends.colorChat)\n    const showPopup = useSelector((state: RootState) =>\n        (state.reactionPopup.show &&\n        (state.reactionPopup.idSelectedMessage === props.idMessage) &&\n        (state.reactionPopup.messageType === \"text\"))\n    )\n    const searchMessage: string = useSelector((state: RootState) => state.chat.searchConversation);\n    useEffect(() => {\n        console.log(\"searchMessage\", searchMessage);\n        \n    }, [searchMessage])\n    let TextContent = () => {\n        if(searchMessage.trim() !== \"\") {\n            const text: string = props.content;\n            if(text.toLowerCase().includes(searchMessage.trim().toLowerCase())) {\n                const index = text.toLowerCase().indexOf(searchMessage.trim().toLowerCase());\n                if(index > -1){\n                    let textStart = \"\"; \n                    if(index !== 0)\n                        textStart = text.slice(0, index);\n                    \n                    const textSearch = text.slice(index, index + searchMessage.length);\n                    const textEnd = text.slice(index + searchMessage.length)\n                    \n                    return (<>\n                        {textStart}<span className=\" text-red-600 bg-yellow-300 inline-block\">{textSearch}</span>{textEnd}\n                    </>)\n                    \n                }\n            } \n        }\n        return <>{props.content}</>\n    };\n\n    return (\n        <>\n            {props.content && <div className= {\" group mb-3.2 flex items-center \" + (props.isFriendMessage ? \" text-white \" : \" text-gray_4 text-right flex-row-reverse \")}> \n                <p className={props.borderRadius + \" inline-block px-2 py-2 sm:px-5.11 sm:py-3 \"}\n                    style={{backgroundColor: props.isFriendMessage ? colorChat : \"white\"}}\n                >\n                    {<TextContent />}\n                </p>\n                {(props.reaction !== undefined) && <span className={\"inline-block self-end text-gray_a \"}>\n                    <Reaction value={props.reaction} />\n                </span>}\n                <div className={` opacity-0 group-hover:opacity-100 transition-opacity duration-500 ease-in-out ${showPopup ? \"opacity-100\":\"\"} `}>\n                    <MessageActions \n                        idMessage= {props.idMessage}\n                        setShowPopup={props.showPopupState[1]} \n                        isFriendContent={props.isFriendMessage} \n                        type=\"text\"\n                    />\n    \n                </div>\n            </div>}\n        </>\n    )\n}\n\nfunction Avatar(props:{src?: string, isFriend?: boolean, isLastRead: boolean}) {\n    const {src, isFriend, isLastRead} = props;\n    console.log(!props.isFriend && props.isLastRead);\n    \n    return (\n        <div className={\"self-end \" + (!props.isFriend ? \" w-6 sm:w-8.33 pl-3.3 \" : \" px-1 sm:px-3.92 \") }>\n            {\n                src ? (isFriend || isLastRead ? <img \n                                className={\"rounded-full  w-4 \" + (isFriend ? \" sm:w-8.29 \" : \"\") }\n                                src={src} \n                                alt=\"avatar\" \n                        /> : \"\")\n                    :  \n                        (isFriend || isLastRead ? <AvatarIcon w={isFriend ? \"w-6 sm:w-8.29\" : \"w-4\"}\n                        h={isFriend ? \"w-6 sm:h-8.29\" : \"h-4\"}\n                        />: \"\")\n                        \n            }\n        </div>\n    )\n}\nfunction Time(props:{time: number}) {\n    return(\n        <p className=\"text-center text-gray_a py-5.37\"> {formatDate(props.time)} </p>\n    )\n}\nfunction formatDate(timestamp: number) {\n    if(Date.now() - timestamp < 60000)\n        return \"now\";\n    const time = new Date(timestamp)\n    const day = time.getDate() > 9 ? time.getDate() : \"0\"+time.getDate();\n    const month = (time.getMonth()+1) > 9 ? (time.getMonth()+1) : \"0\"+(time.getMonth()+1);\n    const year = time.getFullYear();\n    const hours = time.getHours() > 9 ? time.getHours() : \"0\"+time.getHours();\n    const minutes = time.getMinutes() > 9 ? time.getMinutes() : \"0\"+time.getMinutes();\n\n    return (day  + \"-\" + month + \"-\" + year + \" \" + hours + \":\" + minutes);\n}","import React, { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../redux/store';\nimport { supabase } from '../../supabase/supabaseClient';\n\nfunction IsFriendWriting() {\n    const colorChat = useSelector((state: RootState) => state.friends.colorChat);\n    const [showIsWriting, setShowIsWriting] = useState(false);\n    const id_user = useSelector((state: RootState) => state.user.user?.id)\n    const id_selected_friend = useSelector((state: RootState) => state.friends.selectedFriendId)\n    \n    const updateIsWriting = (friendShip: any) => {\n        if((friendShip.id_user1 === id_user && friendShip.id_user2 === id_selected_friend)||(friendShip.id_user2 === id_user && friendShip.id_user1 === id_selected_friend)) {\n\n            if(id_selected_friend === friendShip.id_user1) {\n                setShowIsWriting(friendShip.user1_is_writing)\n                \n            }else {\n                setShowIsWriting(friendShip.user2_is_writing)\n            }\n        }\n    }\n    useEffect(()=> {\n        const mySubscription = supabase.from('friends')\n            .on('UPDATE', payload => {\n                updateIsWriting(payload.new)\n            })\n            .subscribe()\n        return () => {supabase.removeSubscription(mySubscription);}\n    }, [id_selected_friend])\n    return (\n        <div className={` opacity-0 transform transition-all duration-700 ease-out z-20 absolute bottom-0 left-8 sm:left-16.18  ${showIsWriting ? \" opacity-100  transition-all duration-500 ease-in-out -translate-y-20.19\": \"\"}`}>\n            <div className=\"w-12.87 h-8.29 rounded-full flex items-center justify-between px-5.11 py-2\"\n                style={{backgroundColor: colorChat}}\n            >\n                <span className=\" animate-bounce1  self-end  inline-block w-1.5 h-1.5 rounded-full bg-white\"></span>\n                <span className=\"animate-bounce2 self-end inline-block w-1.5 h-1.5 rounded-full bg-white\"></span>\n                <span className=\"animate-bounce1 self-end  inline-block w-1.5 h-1.5 rounded-full bg-white\"></span>\n            </div>\n        </div>\n    )\n}\n\nexport default IsFriendWriting\n","import React, { useEffect, useRef, useState } from 'react'\nimport Header from './Header'\nimport {AttachIcon, LikeIcon} from '../../assets/svgs/SvgIcons'\nimport Message from './Message';\nimport IsFriendTyping from './IsFriendWriting';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../redux/store';\nimport {addNewMessage, setAction, setChatMessages, updateMessageToBeRead} from '../redux/chat/chatSlice'\nimport {supabase} from '../../supabase/supabaseClient'\nimport Loading from '../helpers/Loading';\nimport { messageType } from '../redux/types';\nimport { setColorChat, setIsFriendWriting, setIsFriendWritingTimeout } from '../redux/friends/friendsSlice';\nimport { RealtimeSubscription } from '@supabase/realtime-js';\n\ntype props = {\n    isRightClosedState: [boolean, Function], \n    isMobileScreenState: [boolean, Function],\n}\n\nfunction Center(props: props) {\n    const dispatch = useDispatch();\n    const chat = useSelector((state: RootState) => state.chat.messages);\n    const user = useSelector((state: RootState) => state.user.user);\n    const selectedFriendId = useSelector((state: RootState) => state.friends.selectedFriendId);\n    const actionType = useSelector((state: RootState) => state.chat.action)\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(\"\");\n    const chatContainerRef = useRef(null);\n    const lastUserMessageReadRef = useRef(null);\n    \n    useEffect(()=> {\n        // Scroll to the end of the chat when the user add a new message\n        if(chat.length > 0 && !chat[chat.length-1].isFriendMessage && actionType === \"newMessage\" && chatContainerRef.current !== null) {\n            // @ts-ignore: Object is possibly 'null'.\n            chatContainerRef.current.scrollIntoView({ behavior: 'smooth', block: 'end' })\n        }\n    }, [chat])\n\n\n    const setMessageReadDb = async (id?: number) => {\n        if(id) {\n            await supabase.from('messages')\n                            .update({ is_read: true })\n                            .eq('id', id);\n        }\n        \n    }\n    const getChat = async (update?: boolean) => {\n        !update && setLoading(true);\n        const { data, error } = await supabase.from('messages').select(\"*\")\n                                                .order('time', { ascending: true })\n        if(error) {\n            setError(error.message)\n        }else if(data) {\n            let messages = data.filter((message) => \n            (message.id_sender === user?.id && message.id_reciever === selectedFriendId)||\n            (message.id_sender === selectedFriendId && message.id_reciever === user?.id))\n            messages = messages.map(message => {\n                const newMsg: messageType = {\n                    id: message.id,\n                    isFriendMessage: message.id_sender === selectedFriendId,\n                    isRead: message.is_read,\n                    time: message.time,\n                    text: message.text,\n                    reactionText: message.reaction_text,\n                    sharedImage: message.shared_image,\n                    reactionSharedImage: message.reaction_shared_image,\n                }\n                return (newMsg)\n            })\n            dispatch(setChatMessages(messages))\n        }\n        !update && setLoading(false);\n    }\n    useEffect(()=> {\n        async function getColorChat() {\n            let { data } = await supabase.from('friends').select('*')\n            if(data) {\n                const friendShipData = data.filter(element => \n                    (element.id_user1 === user?.id && element.id_user2 === selectedFriendId)||\n                    (element.id_user2 === user?.id && element.id_user1 === selectedFriendId)\n                    )\n                    \n                    if(friendShipData.length > 0) {\n                        const color = (friendShipData[0].id_user1 === user?.id) ? friendShipData[0].color_chat : friendShipData[0].color_chat2;\n                        dispatch(setColorChat(color));\n                    }\n            }\n        }\n        getChat();\n        getColorChat();\n\n    }, [selectedFriendId])\n    \n    useEffect(() => {\n        // Subscribe to changes Db\n            const mySubscription: RealtimeSubscription = supabase\n                    .from('messages')\n                    .on('*', payload => {\n                        if(payload && payload.eventType === \"INSERT\") {\n                            getChat(true);\n                        }\n                        else if (payload && payload.eventType === \"UPDATE\") {\n                            const message = chat.filter(msg => msg.id === payload.new.id)\n                            if(message.length !== 0 && message[0].id && !message[0].isRead ) {\n                                dispatch(updateMessageToBeRead(message[0].id))\n                            }\n                        }\n                    })\n                    .subscribe()\n                    return () => {\n                        supabase.removeSubscription(mySubscription)\n                    } \n    }, [])\n    let lastFriendMsgReadIndex = -1;\n    let lastUserMsgReadIndex = -1;\n    // Get the last message read first\n    chat.forEach((msg, i) => {\n        if(msg.isRead) {\n            if(!msg.isFriendMessage) \n                lastFriendMsgReadIndex = i; \n            else\n                lastUserMsgReadIndex = i;\n        } \n    })\n\n    let className = \"relative overflow-hidden h-full flex flex-col  transition-width duration-500 ease-in-out\";\n\n    if(props.isRightClosedState[0]) // if rigth is closed \n        className += \" center-width-calc \";\n    else \n        props.isMobileScreenState[0] ? className += \" w-0\" : className += \" w-1/2  \";\n    return (\n        <div className={className}>\n                \n            <Header />\n                    <IsFriendTyping />\n            <div className=\" h-3/6 flex-1 flex flex-col \">\n                {\n                    error && <p className=\"text-red-600\">Error fetching data !</p>\n                }\n                \n                    <div ref={chatContainerRef} className=\" relative flex-1 overflow-auto bg-gray_e w-full \">\n                    {\n                    loading ? <Loading /> :\n                        <>\n                            {\n                                chat.map((message, index) => {\n                                    const previousMsg = index > 0 ? chat[index-1] : undefined;\n                                    const nextMsg = index < chat.length - 1 ? chat[index + 1] : undefined;\n                                    const borderRadius = generateMessageBorderRadius(message, previousMsg, nextMsg)\n                                    const showTime = showMessageTime(message, previousMsg)\n                                    // Update isRead message\n                                    if(message.id && message.isFriendMessage && !message.isRead ) {\n                                        // dispatch(updateMessageToBeRead(message.id))\n                                        setMessageReadDb(message.id)\n                                    }\n                                return (<Message \n                                            key={index}\n                                            data={message}\n                                            showTime={showTime}\n                                            isLastRead={lastFriendMsgReadIndex === index }\n                                            borderRadius = {borderRadius}\n                                            lastUserMessageReadRef={(lastUserMsgReadIndex === index) ? lastUserMessageReadRef : undefined }\n                                        />)\n                                })\n                            }\n                        </>\n                    }\n                    </div>\n                <div className=\"h-12.97 w-full relative z-30 bg-white\">\n                    <TypeMessage />\n                </div>\n            </div>\n        </div>\n    )\n}\n\n\nexport default Center\n\nfunction TypeMessage() {\n    const dispatch = useDispatch();\n    const isWriting = useSelector((state: RootState) => state.friends.isFriendWriting);\n    const id_user = useSelector((state: RootState) => state.user.user?.id)\n    const idSelectedFriend = useSelector((state: RootState) => state.friends.selectedFriendId)\n    let timeOutInstance = useSelector((state: RootState) => state.friends.isFriendWritingTimeout)\n    \n    const updateIswritingDb = async (value: boolean) => {\n        const res = await supabase.from('friends').select(\"*\")\n        if(res.error)\n            console.log(res.error);\n        else if(res.data){\n            const res2 = res.data.filter(friendShip => (friendShip.id_user1 === id_user && \n                friendShip.id_user2 === idSelectedFriend) || (friendShip.id_user2 === id_user && friendShip.id_user1 === idSelectedFriend))[0];\n            let update, match;\n            if(res2.id_user1 === id_user) {\n                update = {user1_is_writing: value};\n                match = {id_user1: id_user, id_user2: idSelectedFriend}\n            } else {\n                update = {user2_is_writing: value};\n                match = {id_user2: id_user, id_user1: idSelectedFriend}\n            }\n            await supabase.from('friends').update(update).match(match)  \n        }\n    }\n    const updateSetTimeout = () => {\n            if(typeof timeOutInstance === 'number') {\n                clearTimeout(timeOutInstance);\n            }\n            const timeout = setTimeout(()=> {\n                dispatch(setIsFriendWriting(false));\n                updateIswritingDb(false);\n            }, 2000);\n            dispatch(setIsFriendWritingTimeout(timeout))\n    }\n\n    const idLastMessage = useSelector((state: RootState) => state.chat.messages.length > 0 ? state.chat.messages[state.chat.messages.length -1].id : 0)\n    \n    const [textMessage, setTextMessage] = useState('');\n    const onChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setTextMessage(e.target.value);\n        if(!isWriting) {\n            dispatch(setIsFriendWriting(true));\n            updateIswritingDb(true);\n            updateSetTimeout();\n        }else {\n            updateSetTimeout();\n        }\n    }\n    const updateDb = async (message: messageType) => {\n        await supabase.from('messages').insert([{\n            id_reciever: idSelectedFriend,\n            id_sender: id_user,\n            text: message.text,\n            reaction_text: message.reactionText,\n            reaction_shared_image: message.reactionSharedImage,\n            is_read: false,\n        }]);\n    }\n    const sendNewMessage = (msg_text?: string, msg_image?: string)=> {\n        const message: messageType = {\n            id: idLastMessage,\n            isFriendMessage: false,\n            isRead: false,\n            text: \"\",\n            time: Date.now(),\n            reactionText: -1,\n            sharedImage: \"\",\n            reactionSharedImage: -1,\n        }\n        // if the text and image are undefined => this msg is like message\n        // else set text or shared image\n        if(msg_text !== undefined)\n            message.text = msg_text;\n        if(msg_image !== undefined)\n            message.sharedImage = msg_image;\n        // Save the message\n        dispatch(setAction(\"newMessage\"));\n        dispatch(addNewMessage(message));\n        // if the message has text & image undefined => it is like message\n        (msg_text !== undefined && msg_image !== undefined) && setTextMessage('');\n        updateDb(message);\n    }\n    const onSubmitHandler = (e: React.SyntheticEvent) => {\n        e.preventDefault();\n        if(textMessage.trim() !== \"\") {\n            sendNewMessage(textMessage.trim(), \"\")\n        }\n    }\n    const onLikeHandller = () => {\n        sendNewMessage();\n    }\n    return (\n        <form \n            className=\" flex border-t border-opacity-40 h-full items-center\"\n            onSubmit={onSubmitHandler}\n        >\n            <input \n                placeholder=\"Type a message...\" \n                className=\" pl-5 w-9/12 sm:flex-1 text-gray_4 outline-none placeholder-gray_a\" \n                type=\"text\"\n                onChange={onChangeHandler}\n                value={textMessage}\n            />\n            <div className=\"relative cursor-pointer\">\n                <input className=\"absolute top-0 left-0 w-full h-full opacity-0 cursor-pointer\" type=\"file\" name=\"attach_file\" id=\"attach_file\" />\n                <AttachIcon />\n            </div>\n            <button \n                type=\"button\" \n                className=\" mx-3 sm:mr-5.18 sm:ml-5.57\"\n                onClick={onLikeHandller}\n            >\n                <LikeIcon />\n            </button>\n        </form>\n    )\n}\n\nfunction generateMessageBorderRadius(thisMsg: messageType, previousMsg?:messageType, nextMsg?:messageType) {\n    let borderRadious = \"\";\n    if(thisMsg.isFriendMessage) {\n        // Friend message => rounded top right\n        borderRadious += \" rounded-tr-3xl \";\n        // Friend message => rounded top left if no previous msg or (is friend msg also and time between the two messages less than 1min)\n        borderRadious += (!previousMsg || !((previousMsg.isFriendMessage === thisMsg.isFriendMessage) && (thisMsg.time - previousMsg.time < 60000))) ? \" rounded-tl-3xl \" : \"\";\n        // Friend message => rounded top right if no next msg or (next msg isFriend msg also and time between the two less than 1min)\n        borderRadious += (!nextMsg || !((nextMsg.isFriendMessage === thisMsg.isFriendMessage) && (nextMsg.time - thisMsg.time < 60000))) ? \" rounded-br-3xl \" : \"\";\n    }else {\n        // Top left\n        borderRadious += \" rounded-tl-3xl \";\n        // Top right\n        borderRadious += (!previousMsg || !((previousMsg.isFriendMessage === thisMsg.isFriendMessage) && (thisMsg.time - previousMsg.time < 60000))) ? \" rounded-tr-3xl \" : \"\";\n        // bottm left\n        borderRadious += (!nextMsg || !((nextMsg.isFriendMessage === thisMsg.isFriendMessage) && (nextMsg.time - thisMsg.time < 60000))) ? \" rounded-bl-3xl \" : \"\";\n    }\n    return borderRadious;\n}\n\nfunction showMessageTime(message: messageType, previousMsg?: messageType) {\n    return (previousMsg === undefined || (new Date(message.time).getTime() - new Date(previousMsg.time).getTime()) > 60000);\n    \n}\n\n","import React from 'react'\nimport {AvatarIcon} from '../../assets/svgs/SvgIcons'\nimport { useSelector } from 'react-redux';\nimport { userType } from '../redux/types';\nimport {RootState} from \"../redux/store\"\nimport Loading from '../helpers/Loading'\n\ntype props = {\n    isRightClosedState: [boolean, Function], \n}\nfunction Header(props: props) {\n    \n    const user: userType | null = useSelector((state: RootState) => state.user.user);\n    let className = \"\"; \n    if(props.isRightClosedState[0])\n        className = \" w-0 overflow-hidden  \";\n    else\n        className = \" md:w-auto h-16.18 p-0 md:px-2 lg:px-5.3 flex items-center justify-end \";\n\n    if(user !== null)\n        return (\n            <header className= {className} >\n                <h2 className=\" transition-width  text-sm lg:text-base text-right text-gray_4 overflow-hidden overflow-ellipsis whitespace-nowrap flex-1\">\n                    {\n                    // @ts-ignore: Object is possibly 'null'.\n                    `${user.firstName} ${user.lastName}`\n                } \n                </h2>\n                <div className=\"w-9 min-w-9 rounded-full overflow-hidden ml-2 lg:ml-3.97\">\n                {\n                // @ts-ignore: Object is possibly 'null'.\n                (user.avatar === \"\") ?  <AvatarIcon w=\"w-full\" h=\"auto\" /> \n                // @ts-ignore: Object is possibly 'null'.\n                                        : <img className=\"w-full\" src={user.avatar} alt=\"avatar\" />\n                }\n                </div>\n            </header>\n        )\n    return <Loading />\n}\n\nexport default Header\n","import React from 'react'\nimport {AvatarIcon} from '../../assets/svgs/SvgIcons'\nimport { useSelector } from 'react-redux';\nimport { friendType } from '../redux/types';\nimport {RootState} from \"../redux/store\"\nimport Loading from '../helpers/Loading';\n\nfunction FriendInfos() {\n    const selectedFriend: friendType|undefined = useSelector((state: RootState) => {\n        if(state.friends.list.length > 0) {\n            if(state.friends.selectedFriendId) {\n                return state.friends.list.filter(friend => friend.id === state.friends.selectedFriendId)[0]\n            }else \n                return state.friends.list[0]\n        }\n        return undefined;\n    });\n    if(selectedFriend === undefined)\n        return <Loading />\n    else\n    return (\n        <div className=\" text-center\">\n            {\n                !(selectedFriend.avatar) ? \n                                <AvatarIcon /> \n                            :\n                                <div className=\"w-16.28 h-16.28 mx-auto rounded-full flex items-center justify-center overflow-hidden ring-gray_e ring-2 \">\n                                    <img className=\"w-full inline-block\" src={selectedFriend.avatar} alt=\"avatar\" />\n                                </div>\n            }\n            <h4 className=\"text-gray_4 mt-5.11\" > {`${selectedFriend.firstName} ${selectedFriend.lastName}`} </h4>\n            <p className=\"text-gray_a text-sm2\"> {selectedFriend.adress} </p>\n            {selectedFriend.fbLink && <p className=\"text-sm2 text-main_color_blue\"> \n                <a href={\"https://facebook.com\" + selectedFriend.fbLink}>\n                    <span className=\"text-white inline-block w-4 h-4 bg-facebook_color_blue font-extrabold rounded-sm pl-1 mr-3.44\">f</span>\n                    {selectedFriend.fbLink}\n\n                </a>\n            </p>}\n        </div>\n    )\n}\n\nexport default FriendInfos\n","import React, { Dispatch, useEffect, useReducer, useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux';\nimport { DotsHorizontalIcon, CheckedIcon } from '../../assets/svgs/SvgIcons'\nimport { RootState } from '../redux/store';\nimport {setColorChat} from \"../redux/friends/friendsSlice\"\nimport { supabase } from '../../supabase/supabaseClient';\n\nfunction ConversationColoros() {\n    const colorChat: string|undefined = useSelector((state: RootState) => state.friends.colorChat);\n    const dispatch = useDispatch();\n\n    return (\n        <div>\n            <div className=\"flex justify-between items-center my-8.89\">\n                <h3 className=\"text-gray_a text-sm2\">Conversation Color</h3>\n                <button>\n                    <DotsHorizontalIcon />\n                </button>\n            </div>\n            <ul className=\"grid grid-cols-7  md:grid-cols-4 xl:grid-cols-7 gap-3.97\">\n                {\n                PALETTE_COLORS.map( (colorCode, index) => <Color \n                                                                id={index} \n                                                                code={colorCode} \n                                                                key={index} \n                                                                colorChat={colorChat}\n                                                                setColorChat={dispatch}\n                                                            />\n                                    )\n                }\n            </ul>\n\n        </div>\n    )\n}\n\nexport default React.memo(ConversationColoros)\n\nfunction Color(props: {id: number, code: string, colorChat?: string, setColorChat: Dispatch<any>}) {\n    const user = useSelector((state: RootState) => state.user.user)\n    const id_selected_friend = useSelector((state: RootState) => state.friends.selectedFriendId)\n    const updateColorChatDb = async (color: string) => {\n        if(user && id_selected_friend) {\n            const res = await supabase.from('friends')\n                                                    .select('*')\n            if(res.error)\n                console.log(res.error);\n            else {\n                const res2 = res.data.filter(friendShip  => (friendShip.id_user1 === user.id && friendShip.id_user2 === id_selected_friend) || (friendShip.id_user2 === user.id && friendShip.id_user1 === id_selected_friend))[0];\n                let update, match;\n                if(res2.id_user1 === user.id) {\n                    update = {color_chat : color};\n                    match = {id_user1: user.id, id_user2: id_selected_friend};\n                } else {\n                    update = {color_chat2 : color};\n                    match = {id_user2: user.id, id_user1: id_selected_friend};\n                    \n                }\n                const { data, error } = await supabase.from('friends')\n                                                    .update(update)\n                                                    .match(match)\n                if(error)\n                    console.log(error);\n                else \n                    console.log(data);\n            }\n                \n                \n        }\n\n    }\n    const clickHandler: React.MouseEventHandler<HTMLButtonElement> = React.useCallback(() => {\n        props.setColorChat(setColorChat(props.code));\n        updateColorChatDb(props.code);\n    }, [props])\n    \n    return(\n        <button className=\"w-8 pt-8 sm:w-8.26 sm:pt-8.26 rounded-full relative \"\n                style={{backgroundColor: props.code}}\n                onClick={clickHandler}\n        >\n            {\n                ((props.colorChat === undefined && props.id === 0) || props.colorChat === props.code) && <div className=\"absolute sm:top-1/4 sm:left-1/4 top-1.5 left-1.5 \"><CheckedIcon /></div>\n            }\n        </button>\n    )\n}\nconst PALETTE_COLORS = [\n    \"#0084ff\",\n    \"#f44336\",\n    \"#9c27b0\",\n    \"#3f51b5\",\n    \"#51cbf9\",\n    \"#00bcd4\",\n    \"#009688\",\n    \"#4caf50\",\n    \"#8bc34a\",\n    \"#cddc39\",\n    \"#ffc107\",\n    \"#ff5722\",\n    \"#795548\",\n    \"#607d8b\",\n]","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux'\nimport { DotsHorizontalIcon } from '../../assets/svgs/SvgIcons'\nimport { showImageViewer } from '../redux/imageViewer/imageViewerSlice'\nimport { RootState } from '../redux/store'\nimport { supabase } from '../../supabase/supabaseClient';\nimport Loading from '../helpers/Loading';\nimport { setSharedPhotos } from '../redux/friends/friendsSlice';\n\nfunction SharedPhotos() {\n    const dispatch = useDispatch();\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(\"\");\n    const sharedPhotos = useSelector((state: RootState) => state.friends.sharedPhotos);\n    const user = useSelector((state: RootState) => state.user.user);\n    const seletedFriendId = useSelector((state: RootState) => state.friends.selectedFriendId);\n    useEffect(() => {\n        const getSharedPhotos = async () => {\n            setLoading(true)\n            const { data, error } = await supabase.from('sharedImages')\n                                                                .select(\"*\")\n            if(error) {\n                setError(error.message)\n            } else if(data) {\n                const shared = data.filter(photo => \n                    (photo.id_sender === seletedFriendId && photo.id_reciever === user?.id)||\n                    (photo.id_sender === user?.id && photo.id_reciever === seletedFriendId))\n                dispatch(setSharedPhotos(shared.map(shared => shared.url)));\n            }\n            setLoading(false);\n        }\n        getSharedPhotos();\n    }, [seletedFriendId])\n    return (\n        <div>\n            <div className=\"flex justify-between items-center my-8.89\">\n                <h3 className=\"text-gray_a text-sm2\">Shared Photos</h3>\n                <button>\n                    <DotsHorizontalIcon />\n                </button>\n            </div>\n            <div className=\"relative\">\n                {\n                    loading && <Loading />\n                }\n                {\n                    error && <div className=\"text-red-600\"> Error fetching data !</div>\n                }\n                {sharedPhotos.length > 0 && <ul className=\"grid grid-cols-3 md:grid-cols-2 lg:grid-cols-3  gap-3.36\">\n                    {sharedPhotos.map( (url, index) => <Image  key={index} url={url}/>)}\n                </ul>}\n            </div>\n\n        </div>\n    )\n}\n\nexport default SharedPhotos\n\nfunction Image(props: {url: string}) {\n    const dispatch = useDispatch();\n    const clickHandler= () => {\n        dispatch(showImageViewer(props.url.trim()))\n    }\n    return(\n        <div className=\"w-full pt-full rounded-full relative cursor-pointer \"\n                onClick={clickHandler}\n        >\n            <img className=\" absolute top-0 left-0 h-full\" src={props.url} alt=\"shared\" />\n        </div>\n    )\n}\n\n// const SHARED_PHOTOS = [\n//     \"https://images.unsplash.com/photo-1506744038136-46273834b3fb?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxleHBsb3JlLWZlZWR8MXx8fGVufDB8fHx8&w=1000&q=80\",\n//     \"https://photographycourse.net/wp-content/uploads/2014/11/Landscape-Photography-steps.jpg\",\n//     \"https://t3.ftcdn.net/jpg/03/15/34/90/360_F_315349043_6ohfFyx37AFusCKZtGQtJR0jqUxhb25Y.jpg\",\n//     \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQz3aA8kY27O6MPCBz9RPODXdyN2xI0AEFBJA&usqp=CAU\",\n//     \"https://i.pinimg.com/originals/72/0b/93/720b938b447a5db0d93da13cebc1e591.jpg\"\n// ]","import Header from './Header'\nimport FriendInfos from './FriendInfos'\nimport SearchBar from '../SearchBar'\nimport {MAIN_COLOR_BLUE} from '../../assets/theme/colors'\nimport {LeftChevronIcon, RightChevronIcon, SettingsIcon} from '../../assets/svgs/SvgIcons'\nimport ConversationColoros from './ConversationColoros'\nimport SharedPhotos from './SharedPhotos'\n\ntype props = {\n    isRightClosedState: [boolean, Function], \n    isMobileScreenState: [boolean, Function],\n}\n\nfunction Right(props: props) {\n\n    let className = \"shadow-lg  relative transform transition-width duration-500 ease-in-out overflow-hidden h-full \";\n\n    if(props.isRightClosedState[0]) // if rigth is closed \n        className += \" w-5.3 \";\n    else \n        props.isMobileScreenState[0] ? className += \" right-width-calc \" : className += \" w-1/4 \";\n\n\n    return (\n        <div className={className}>\n            <Header isRightClosedState={props.isRightClosedState} />\n            <HideRightBtn isRightClosedState={props.isRightClosedState} />\n            <div className={\" relative overflow-auto h-full  \" + (props.isRightClosedState[0] === true ? \" p-0 w-0 \": \" px-5.3 w-full \")}>\n                <SettingsBtn />\n                <FriendInfos />\n                <div className=\" mt-8.26\">\n                    <SearchBar colorIcon={MAIN_COLOR_BLUE}  idInput=\"searchConversation\" />\n\n                </div>\n                <div className=\" my-8.26\">\n                    <ConversationColoros />\n                </div>\n                <div className=\" my-8.26\">\n                    <SharedPhotos />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Right\n\nfunction HideRightBtn(props: {isRightClosedState: [boolean, Function]}) {\n    const [isRightClosed, setRightToClose] = props.isRightClosedState;\n    const onClickHandler = () => {\n        console.log(\"click btn\");\n        \n        setRightToClose(!isRightClosed)\n    }\n    return (\n        <button className=\"absolute z-10 cursor-pointer w-5.3 h-8.89 top-16.18 left-0 bg-main_color_blue\"\n        onClick={onClickHandler}\n        >\n            {\n                isRightClosed ? <LeftChevronIcon /> : <RightChevronIcon />\n            }\n        </button>\n    )\n}\n\nfunction SettingsBtn() {\n    return (\n        <div className=\"text-right\">\n            <button>\n                <SettingsIcon />\n            </button>\n        </div>\n    )\n}\n\n","import { useDispatch, useSelector } from 'react-redux';\nimport { CloseIcon } from '../assets/svgs/SvgIcons'\nimport { RootState } from './redux/store';\nimport {showImageViewer} from './redux/imageViewer/imageViewerSlice'\n\nfunction ImageViewer() {\n    const urlImage = useSelector((state: RootState) => state.imageViewer.urlImage);\n    const dispatch = useDispatch();\n    const onCloseHandler = () => {\n        dispatch(showImageViewer(\"\"));\n    }\n    return (\n        <div className={(urlImage !== \"\" ? \" block \" : \" hidden \") + \" absolute top-0 left-0 w-full h-full bg-gray-400 bg-opacity-90 z-50 text-center flex items-center justify-center\"} >\n            <div className=\"relative max-w-90 max-h-90   flex flex-col pt-4\">\n                <button\n                    className=\"absolute ring-gray-100 ring-1 -top-0 -right-4  rounded-full bg-gray-800 p-1\"\n                    onClick={onCloseHandler}\n                >\n                    <CloseIcon />\n                </button>\n                <div className=\"bg-gray-100 text-center p-4 max-h-90  overflow-auto \">\n                        <img className=\"inline-block h-full w-auto  max-w-full \" src={urlImage} alt=\"\" />\n    \n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ImageViewer\n","import { createSlice, CaseReducer, PayloadAction } from \"@reduxjs/toolkit\";\nimport { userType } from \"../types\";\ntype userSliceType = {\n    user: userType | null,\n};\nconst initialState: userSliceType = {user: null};\n\nconst setUserInstance : CaseReducer<userSliceType, PayloadAction<userType | null>>  = (state, action) => {\n    if(action.payload === null)\n        return ({\n            user: null,\n        });\n    return(\n        {\n            ...state,\n            user: action.payload\n        }\n    )\n}\nconst userSlice = createSlice({\n    name: \"user\",\n    initialState: initialState,\n    reducers: {\n        setUser: setUserInstance,\n    }\n})\nexport default userSlice;\nexport const {setUser} = userSlice.actions;","import { useState } from 'react'\nimport { supabase } from './supabaseClient'\nimport {userType} from '../components/redux/types'\nimport { useDispatch } from 'react-redux'\nimport { setUser } from '../components/redux/user/userSlice';\nimport { LoadingIcon } from '../assets/svgs/SvgIcons';\n\nexport default function Auth() {\n    const dispatch = useDispatch();\n    const [loading, setLoading] = useState(false)\n    const [error, setError] = useState(\"\")\n    const clickHandler = async (id: number) => {\n        setLoading(true);\n        let { data, error } = await supabase.from('users');\n        if(error) {\n            setLoading(false)\n            setError(error.message)\n        }else if(data) {\n            setLoading(false)\n            const user = data.filter(user => user.id === id)[0] as userType;\n            dispatch(setUser(user));\n        }\n    }\n    const UserBtn = (props:{id: number, name: string}) => {\n        return <button \n                    className=\" hover:bg-main_color_blue hover:text-white transition duration-500 ease-out hover:shadow-lg shadow-md ring-1 ring-facebook_color_blue rounded-md my-2 py-2\"\n                    onClick={() => clickHandler(props.id)}\n                >\n                    {props.name }\n                    {\n                        (error !== \"\") && <span className=\"text-red-600 text-sm block\">Error fetching data! </span>\n                    }\n                </button>\n\n    } \n    return (\n    <div className=\" w-full h-screen overflow-hidden flex items-center relative \">\n        {\n            loading && <div className=\"absolute z-50 w-full h-full bg-gray-200 bg-opacity-60\"><div className=\"absolute  top-1/2 left-1/2 \">\n                <LoadingIcon />\n            </div></div>\n        }\n        <div \n            className={`\n                flex justify-center flex-col text-center\n                rounded-lg \n                shadow-sm \n                border border-gray-100  \n                mx-2 sm:mx-auto mt-16 \n                pb-20 pt-10 px-4  \n                w-full sm:w-2/4 xl:w-1/4   \n            `}\n        >\n            <h1 className=\" text-gray-600 text-2xl my-12\">Continu As:</h1>\n                <UserBtn name=\"Mohamed\" id={1} />\n                <UserBtn name=\"El Mehdi\" id={2} />\n                \n\n        </div>\n\n    </div>\n)\n}\n","import { useState, useEffect } from 'react';\nimport Left from './components/left/Left';\nimport Center from './components/center/Center';\nimport Right from './components/right/Right';\nimport ImageViewer from './components/ImageViewer';\nimport { supabase } from './supabase/supabaseClient';\nimport Auth from './supabase/Auth';\nimport { useSelector } from 'react-redux';\nimport { RootState } from './components/redux/store';\nimport Loading from './components/helpers/Loading';\n\nfunction App() {\n  const user = useSelector((state: RootState) => state.user.user);\n  const isRightClosedState = useState(true);\n  // Check screen width & listen to window resize event\n  const [isMobileScreenState, setToMobileScreen] = useState(true);\n  useEffect(() => {\n    const checkScreenWidth = () => {\n      if(window.innerWidth < 768)\n        setToMobileScreen(true)\n      else {\n        setToMobileScreen(false);\n        isRightClosedState[1](false);\n      }\n    }\n    // Get the screen size\n    checkScreenWidth();\n    // Listen to screen resize event\n    window.addEventListener('resize', checkScreenWidth);\n  }, []);\n\n\n  useEffect(() => {\n\n  }, []);\n\n  return( (user === null) ? <Auth /> :\n    <div className='w-screen h-screen bg-gray-50 overflow-hidden'>\n      <ImageViewer />\n      <div className=' w-full flex  max-w-screen-2xl mx-auto bg-white overflow-hidden h-full '>\n        <div className='w-14 sm:w-1/3 md:w-1/4 overflow-hidden   shadow-lg'>\n          <Left />\n        </div>\n\n        <Center\n          isRightClosedState={isRightClosedState}\n          isMobileScreenState={[isMobileScreenState, setToMobileScreen]}\n        />\n\n        <Right\n          isRightClosedState={isRightClosedState}\n          isMobileScreenState={[isMobileScreenState, setToMobileScreen]}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from \"@reduxjs/toolkit\"\nimport userSlice from  \"./user/userSlice\";\nimport friendsSlice from  \"./friends/friendsSlice\";\nimport chatSlice from \"./chat/chatSlice\";\nimport imageViewerSlice from \"./imageViewer/imageViewerSlice\";\nimport reactionPopupSlice from \"./chat/reactionPopupSlice\";\n\nconst rootReducer = combineReducers({\n    user: userSlice.reducer,\n    friends: friendsSlice.reducer,\n    chat: chatSlice.reducer,\n    imageViewer: imageViewerSlice.reducer,\n    reactionPopup: reactionPopupSlice.reducer,\n});\n\nexport default rootReducer;","import { configureStore } from '@reduxjs/toolkit';\nimport rootReducer from './rootReducer';\n\nconst store = configureStore({\n    reducer: rootReducer,\n})\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './components/redux/store'\nimport { Provider } from 'react-redux'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}